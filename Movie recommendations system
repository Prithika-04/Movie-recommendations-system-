import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Step 1: Mini Movie Dataset
data = {
    'title': [
        'The Matrix',
        'John Wick',
        'Inception',
        'Interstellar',
        'The Dark Knight',
        'Avengers: Endgame'
    ],
    'description': [
        'A computer hacker learns about the true nature of his reality and his role in the war against its controllers.',
        'An ex-hitman comes out of retirement to track down the gangsters that killed his dog.',
        'A thief who steals corporate secrets through use of dream-sharing technology.',
        'A team of explorers travel through a wormhole in space in an attempt to ensure humanity\'s survival.',
        'Batman faces the Joker, a criminal mastermind who wants to plunge Gotham into anarchy.',
        'The Avengers assemble once more to reverse Thanos\' actions and restore balance.'
    ]
}

df = pd.DataFrame(data)

# Step 2: Vectorize Descriptions
vectorizer = TfidfVectorizer(stop_words='english')
tfidf_matrix = vectorizer.fit_transform(df['description'])

# Step 3: Similarity Matrix
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

# Step 4: Recommendation Function
def recommend(title, cosine_sim=cosine_sim):
    idx = df[df['title'] == title].index[0]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = sim_scores[1:4]  # Top 3 excluding the movie itself
    movie_indices = [i[0] for i in sim_scores]
    return df['title'].iloc[movie_indices]

# Step 5: Example Usage
movie = "Inception"
recommendations = recommend(movie)

print(f"\nðŸŽ¥ Because you liked '{movie}', you might also like:")
for rec in recommendations:
    print(f" - {rec}")
